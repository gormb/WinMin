; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32538.0 

	TITLE	c:\s\gormb\minpad\release\minpad.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CC@JBGLHNJD@Text?5?$CI?$CK?4txt?$CJ?$AA?$CK?4txt?$AAAll?5?$CI?$CK?4?$CK?$CJ?$AA?$CK?4@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_04DNCDCIAE@Open@				; `string'
PUBLIC	??_C@_04INACKGJP@Save@				; `string'
PUBLIC	?ofn@@3UtagOFNA@@A				; ofn
PUBLIC	?pOrgEdit@@3P6GJPAUHWND__@@IIJ@ZA		; pOrgEdit
PUBLIC	?bIgnoreKeys@@3_NA				; bIgnoreKeys
PUBLIC	?szFn@@3PADA					; szFn
PUBLIC	?hDlg@@3PAUHWND__@@A				; hDlg
PUBLIC	?hEdit@@3PAUHWND__@@A				; hEdit
EXTRN	__imp__GetWindowTextLengthW@4:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__CallWindowProcW@20:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__DialogBoxParamA@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	__imp__GetSaveFileNameA@4:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__GetOpenFileNameA@4:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetCommandLineW@0:PROC
EXTRN	__imp__ReadFile@20:PROC
?ofn@@3UtagOFNA@@A DB 058H DUP (?)			; ofn
?pOrgEdit@@3P6GJPAUHWND__@@IIJ@ZA DD 01H DUP (?)	; pOrgEdit
?bIgnoreKeys@@3_NA DB 01H DUP (?)			; bIgnoreKeys
	ALIGN	4

?szFn@@3PADA DB	0104H DUP (?)				; szFn
?hDlg@@3PAUHWND__@@A DD 01H DUP (?)			; hDlg
?hEdit@@3PAUHWND__@@A DD 01H DUP (?)			; hEdit
_BSS	ENDS
;	COMDAT ??_C@_04INACKGJP@Save@
CONST	SEGMENT
??_C@_04INACKGJP@Save@ DB 'Save', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open@ DB 'Open', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JBGLHNJD@Text?5?$CI?$CK?4txt?$CJ?$AA?$CK?4txt?$AAAll?5?$CI?$CK?4?$CK?$CJ?$AA?$CK?4@
CONST	SEGMENT
??_C@_0CC@JBGLHNJD@Text?5?$CI?$CK?4txt?$CJ?$AA?$CK?4txt?$AAAll?5?$CI?$CK?4?$CK?$CJ?$AA?$CK?4@ DB 'T'
	DB	'ext (*.txt)', 00H, '*.txt', 00H, 'All (*.*)', 00H, '*.*', 00H
	DB	00H						; `string'
CONST	ENDS
PUBLIC	?aWinMain@@YGHXZ				; aWinMain
PUBLIC	?aWinProc@@YGHPAUHWND__@@IIJ@Z			; aWinProc
PUBLIC	?EditProc@@YGHPAUHWND__@@IIJ@Z			; EditProc
PUBLIC	?_t_WinProc@@YAHPAUHWND__@@IIJ@Z		; _t_WinProc
PUBLIC	?WmKeydown@@YAHH@Z				; WmKeydown
PUBLIC	?WmSize@@YAHFF@Z				; WmSize
PUBLIC	?WmCommand@@YAHIJ@Z				; WmCommand
PUBLIC	?CEnd@@YAHXZ					; CEnd
PUBLIC	?CSelectAll@@YAHXZ				; CSelectAll
PUBLIC	?CPaste@@YAHXZ					; CPaste
PUBLIC	?CCopy@@YAHXZ					; CCopy
PUBLIC	?CCut@@YAHXZ					; CCut
PUBLIC	?CSaveas@@YAHXZ					; CSaveas
PUBLIC	?COpen@@YAHXZ					; COpen
PUBLIC	?CDefault@@YAHXZ				; CDefault
PUBLIC	?CSave@@YAHXZ					; CSave
PUBLIC	?CLoad@@YAHXZ					; CLoad
PUBLIC	?CNew@@YAHXZ					; CNew
PUBLIC	?WmInit@@YAHPAUHWND__@@@Z			; WmInit
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?WmInit@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?WmInit@@YAHPAUHWND__@@@Z PROC				; WmInit, COMDAT
; _hDlgl$ = ecx

; 15   :     hDlg = hDlgl;
; 16   :     hEdit = GetDlgItem(hDlg, IDC_TEXTBOX);

  00000	68 e9 03 00 00	 push	 1001			; 000003e9H
  00005	51		 push	 ecx
  00006	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hDlg@@3PAUHWND__@@A, ecx ; hDlg
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 17   : #ifdef SHORTCUT_KEYS
; 18   :     pOrgEdit = (WNDPROC)SetWindowLongPtr(hEdit, GWLP_WNDPROC, (LONG_PTR)EditProc);

  00012	68 00 00 00 00	 push	 OFFSET ?EditProc@@YGHPAUHWND__@@IIJ@Z ; EditProc
  00017	6a fc		 push	 -4			; fffffffcH
  00019	50		 push	 eax
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?hEdit@@3PAUHWND__@@A, eax ; hEdit
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongW@12
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?pOrgEdit@@3P6GJPAUHWND__@@IIJ@ZA, eax ; pOrgEdit

; 19   : #endif
; 20   :     ofn.lStructSize = sizeof(ofn);
; 21   :     ofn.hwndOwner = hDlg;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDlg@@3PAUHWND__@@A ; hDlg
  0002f	c7 05 00 00 00
	00 58 00 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A, 88 ; 00000058H
  00039	a3 04 00 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A+4, eax

; 22   :     ofn.lpstrFile = szFn;

  0003e	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A+28, OFFSET ?szFn@@3PADA ; szFn

; 23   :     ofn.nMaxFile = MAX_PATH;

  00048	c7 05 20 00 00
	00 04 01 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A+32, 260 ; 00000104H

; 24   :     ofn.lpstrFilter = "Text (*.txt)\0*.txt\0All (*.*)\0*.*\0";

  00052	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A+12, OFFSET ??_C@_0CC@JBGLHNJD@Text?5?$CI?$CK?4txt?$CJ?$AA?$CK?4txt?$AAAll?5?$CI?$CK?4?$CK?$CJ?$AA?$CK?4@

; 25   :     ofn.nFilterIndex = 1;

  0005c	c7 05 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ofn@@3UtagOFNA@@A+24, 1

; 26   :     return CDefault();

  00066	e9 00 00 00 00	 jmp	 ?CDefault@@YAHXZ	; CDefault
?WmInit@@YAHPAUHWND__@@@Z ENDP				; WmInit
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?WmCommand@@YAHIJ@Z
_TEXT	SEGMENT
?WmCommand@@YAHIJ@Z PROC				; WmCommand, COMDAT
; _c$ = ecx
; _lP$dead$ = edx

; 101  :     switch (c) {

  00000	b8 45 9c 00 00	 mov	 eax, 40005		; 00009c45H
  00005	3b c8		 cmp	 ecx, eax
  00007	77 56		 ja	 SHORT $LN16@WmCommand
  00009	74 45		 je	 SHORT $LN9@WmCommand
  0000b	49		 dec	 ecx
  0000c	83 e9 01	 sub	 ecx, 1
  0000f	74 3f		 je	 SHORT $LN9@WmCommand
  00011	81 e9 3f 9c 00
	00		 sub	 ecx, 39999		; 00009c3fH
  00017	74 1e		 je	 SHORT $LN5@WmCommand
  00019	83 e9 01	 sub	 ecx, 1
  0001c	74 14		 je	 SHORT $LN6@WmCommand
  0001e	83 e9 01	 sub	 ecx, 1
  00021	74 0a		 je	 SHORT $LN7@WmCommand
  00023	83 e9 01	 sub	 ecx, 1
  00026	75 53		 jne	 SHORT $LN2@WmCommand

; 106  :     case ID_FILE_SAVEAS: return CSaveas();

  00028	e9 00 00 00 00	 jmp	 ?CSaveas@@YAHXZ		; CSaveas
$LN7@WmCommand:

; 105  :     case ID_FILE_SAVE: return CSave();

  0002d	e9 00 00 00 00	 jmp	 ?CSave@@YAHXZ		; CSave
$LN6@WmCommand:

; 103  :     case ID_FILE_NEW: return CNew();
; 104  :     case ID_FILE_OPEN: return COpen();

  00032	e9 00 00 00 00	 jmp	 ?COpen@@YAHXZ		; COpen
$LN5@WmCommand:

; 29   : __inline int CNew() { *szFn = 0; return SetWindowTextA(hEdit, ""); }

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003c	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  00042	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFn@@3PADA, 0
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 115  : }

  0004f	c3		 ret	 0
$LN9@WmCommand:

; 98   : __inline int CEnd() { return EndDialog(hDlg, 0);  }

  00050	6a 00		 push	 0
  00052	ff 35 00 00 00
	00		 push	 DWORD PTR ?hDlg@@3PAUHWND__@@A ; hDlg
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 115  : }

  0005e	c3		 ret	 0
$LN16@WmCommand:

; 101  :     switch (c) {

  0005f	81 e9 46 9c 00
	00		 sub	 ecx, 40006		; 00009c46H
  00065	74 3d		 je	 SHORT $LN12@WmCommand
  00067	83 e9 01	 sub	 ecx, 1
  0006a	74 2d		 je	 SHORT $LN13@WmCommand
  0006c	83 e9 01	 sub	 ecx, 1
  0006f	74 1d		 je	 SHORT $LN14@WmCommand
  00071	83 e9 01	 sub	 ecx, 1
  00074	74 0d		 je	 SHORT $LN11@WmCommand
  00076	83 e9 01	 sub	 ecx, 1
  00079	74 03		 je	 SHORT $LN4@WmCommand
$LN2@WmCommand:

; 113  :     }
; 114  :     return FALSE;

  0007b	33 c0		 xor	 eax, eax

; 115  : }

  0007d	c3		 ret	 0
$LN4@WmCommand:

; 102  :     case ID_FILE_DEFAULT: return CDefault();

  0007e	e9 00 00 00 00	 jmp	 ?CDefault@@YAHXZ	; CDefault
$LN11@WmCommand:

; 96   : __inline int CSelectAll() { SendMessage(hEdit, EM_SETSEL, 0, -1); return TRUE; }

  00083	6a ff		 push	 -1
  00085	6a 00		 push	 0
  00087	68 b1 00 00 00	 push	 177			; 000000b1H

; 107  :     case IDCANCEL:
; 108  :     case ID_FILE_EXIT: return CEnd();
; 109  :     case ID_EDIT_SELECTALL: return CSelectAll();

  0008c	eb 1f		 jmp	 SHORT $LN30@WmCommand
$LN14@WmCommand:

; 95   : __inline int CPaste() { SendMessage(hEdit, WM_PASTE, 0, 0); return TRUE; }

  0008e	6a 00		 push	 0
  00090	6a 00		 push	 0
  00092	68 02 03 00 00	 push	 770			; 00000302H

; 112  :     case ID_EDIT_PASTE: return CPaste();

  00097	eb 14		 jmp	 SHORT $LN30@WmCommand
$LN13@WmCommand:

; 94   : __inline int CCopy() { SendMessage(hEdit, WM_COPY, 0, 0); return TRUE; }

  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	68 01 03 00 00	 push	 769			; 00000301H

; 110  :     case ID_EDIT_CUT: return CCut();
; 111  :     case ID_EDIT_COPY: return CCopy();

  000a2	eb 09		 jmp	 SHORT $LN30@WmCommand
$LN12@WmCommand:

; 93   : __inline int CCut() { SendMessage(hEdit, WM_CUT, 0, 0); return TRUE; }

  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	68 00 03 00 00	 push	 768			; 00000300H
$LN30@WmCommand:

; 115  : }

  000ad	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  000b9	33 c0		 xor	 eax, eax
  000bb	40		 inc	 eax
  000bc	c3		 ret	 0
?WmCommand@@YAHIJ@Z ENDP				; WmCommand
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?WmKeydown@@YAHH@Z
_TEXT	SEGMENT
?WmKeydown@@YAHH@Z PROC					; WmKeydown, COMDAT
; _k$ = ecx

; 121  :     if (!bIgnoreKeys && GetKeyState(VK_CONTROL) & 0x800) {

  00000	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bIgnoreKeys@@3_NA, 0 ; bIgnoreKeys
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f 85 9c 00 00
	00		 jne	 $LN4@WmKeydown
  00010	6a 11		 push	 17			; 00000011H
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  00018	66 0f ba e0 0b	 bt	 ax, 11			; 0000000bH
  0001d	0f 83 89 00 00
	00		 jae	 $LN4@WmKeydown

; 122  :         bIgnoreKeys = true;

  00023	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bIgnoreKeys@@3_NA, 1 ; bIgnoreKeys

; 123  :         switch (k) { // DNOSW AXCV

  0002a	83 fe 4f	 cmp	 esi, 79			; 0000004fH
  0002d	7f 62		 jg	 SHORT $LN17@WmKeydown
  0002f	74 5a		 je	 SHORT $LN7@WmKeydown
  00031	83 ee 41	 sub	 esi, 65			; 00000041H
  00034	74 3b		 je	 SHORT $LN12@WmKeydown
  00036	4e		 dec	 esi
  00037	83 ee 01	 sub	 esi, 1
  0003a	74 2a		 je	 SHORT $LN14@WmKeydown
  0003c	83 ee 01	 sub	 esi, 1
  0003f	74 1f		 je	 SHORT $LN5@WmKeydown
  00041	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00044	75 5f		 jne	 SHORT $LN2@WmKeydown

; 29   : __inline int CNew() { *szFn = 0; return SetWindowTextA(hEdit, ""); }

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004b	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  00051	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFn@@3PADA, 0
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
  0005e	5e		 pop	 esi

; 138  : }

  0005f	c3		 ret	 0
$LN5@WmKeydown:
  00060	5e		 pop	 esi

; 124  :         case 'D': return CDefault();

  00061	e9 00 00 00 00	 jmp	 ?CDefault@@YAHXZ	; CDefault
$LN14@WmKeydown:

; 94   : __inline int CCopy() { SendMessage(hEdit, WM_COPY, 0, 0); return TRUE; }

  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	68 01 03 00 00	 push	 769			; 00000301H

; 132  :         case 'C': return CCopy();

  0006f	eb 09		 jmp	 SHORT $LN44@WmKeydown
$LN12@WmKeydown:

; 96   : __inline int CSelectAll() { SendMessage(hEdit, EM_SETSEL, 0, -1); return TRUE; }

  00071	6a ff		 push	 -1
  00073	6a 00		 push	 0
  00075	68 b1 00 00 00	 push	 177			; 000000b1H
$LN44@WmKeydown:

; 138  : }

  0007a	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  00086	33 c0		 xor	 eax, eax
  00088	40		 inc	 eax
  00089	5e		 pop	 esi
  0008a	c3		 ret	 0
$LN7@WmKeydown:
  0008b	5e		 pop	 esi

; 125  :         case 'N': return CNew();
; 126  :         case 'O': return COpen();

  0008c	e9 00 00 00 00	 jmp	 ?COpen@@YAHXZ		; COpen
$LN17@WmKeydown:

; 123  :         switch (k) { // DNOSW AXCV

  00091	83 ee 53	 sub	 esi, 83			; 00000053H
  00094	74 40		 je	 SHORT $LN8@WmKeydown
  00096	83 ee 03	 sub	 esi, 3
  00099	74 30		 je	 SHORT $LN15@WmKeydown
  0009b	83 ee 01	 sub	 esi, 1
  0009e	74 1b		 je	 SHORT $LN10@WmKeydown
  000a0	83 ee 01	 sub	 esi, 1
  000a3	74 0b		 je	 SHORT $LN13@WmKeydown
$LN2@WmKeydown:

; 134  :         }
; 135  :         bIgnoreKeys = false;

  000a5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bIgnoreKeys@@3_NA, 0 ; bIgnoreKeys
$LN4@WmKeydown:

; 136  :     }
; 137  :     return FALSE;

  000ac	33 c0		 xor	 eax, eax
  000ae	5e		 pop	 esi

; 138  : }

  000af	c3		 ret	 0
$LN13@WmKeydown:

; 93   : __inline int CCut() { SendMessage(hEdit, WM_CUT, 0, 0); return TRUE; }

  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
  000b4	68 00 03 00 00	 push	 768			; 00000300H

; 129  :         case 'W': return CEnd();
; 130  :         case 'A': return CSelectAll();
; 131  :         case 'X': return CCut();

  000b9	eb bf		 jmp	 SHORT $LN44@WmKeydown
$LN10@WmKeydown:

; 98   : __inline int CEnd() { return EndDialog(hDlg, 0);  }

  000bb	6a 00		 push	 0
  000bd	ff 35 00 00 00
	00		 push	 DWORD PTR ?hDlg@@3PAUHWND__@@A ; hDlg
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  000c9	5e		 pop	 esi

; 138  : }

  000ca	c3		 ret	 0
$LN15@WmKeydown:

; 95   : __inline int CPaste() { SendMessage(hEdit, WM_PASTE, 0, 0); return TRUE; }

  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	68 02 03 00 00	 push	 770			; 00000302H

; 133  :         case 'V': return CPaste();

  000d4	eb a4		 jmp	 SHORT $LN44@WmKeydown
$LN8@WmKeydown:

; 127  :         case 'S': if (!*szFn) return CSaveas();

  000d6	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?szFn@@3PADA, 0
  000dd	5e		 pop	 esi
  000de	0f 84 00 00 00
	00		 je	 ?CSaveas@@YAHXZ		; CSaveas

; 128  :                 else return CSave();

  000e4	e9 00 00 00 00	 jmp	 ?CSave@@YAHXZ		; CSave
?WmKeydown@@YAHH@Z ENDP					; WmKeydown
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?_t_WinProc@@YAHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_wP$ = 8						; size = 4
_lP$ = 12						; size = 4
?_t_WinProc@@YAHPAUHWND__@@IIJ@Z PROC			; _t_WinProc, COMDAT
; _hDlgl$ = ecx
; _uM$ = edx

; 142  :     switch (uM) {

  00000	83 ea 05	 sub	 edx, 5
  00003	74 2c		 je	 SHORT $LN5@t_WinProc
  00005	81 ea fb 00 00
	00		 sub	 edx, 251		; 000000fbH
  0000b	74 1b		 je	 SHORT $LN6@t_WinProc
  0000d	83 ea 10	 sub	 edx, 16			; 00000010H
  00010	74 11		 je	 SHORT $LN4@t_WinProc
  00012	83 ea 01	 sub	 edx, 1
  00015	74 03		 je	 SHORT $LN7@t_WinProc

; 149  :     default: return FALSE;

  00017	33 c0		 xor	 eax, eax

; 150  :     }
; 151  : }

  00019	c3		 ret	 0
$LN7@t_WinProc:

; 147  :     #endif
; 148  :     case WM_COMMAND: return WmCommand(wP, lP); // pass-through; FALSE

  0001a	8b 4c 24 04	 mov	 ecx, DWORD PTR _wP$[esp-4]
  0001e	e9 00 00 00 00	 jmp	 ?WmCommand@@YAHIJ@Z	; WmCommand
$LN4@t_WinProc:

; 143  :     case WM_INITDIALOG: return WmInit(hDlgl);

  00023	e9 00 00 00 00	 jmp	 ?WmInit@@YAHPAUHWND__@@@Z ; WmInit
$LN6@t_WinProc:

; 145  :     #ifdef SHORTCUT_KEYS
; 146  :         case WM_KEYDOWN: return WmKeydown(wP);

  00028	8b 4c 24 04	 mov	 ecx, DWORD PTR _wP$[esp-4]
  0002c	e9 00 00 00 00	 jmp	 ?WmKeydown@@YAHH@Z	; WmKeydown
$LN5@t_WinProc:

; 144  :     case WM_SIZE: return WmSize(lP, lP>>16);

  00031	8b 4c 24 08	 mov	 ecx, DWORD PTR _lP$[esp-4]
  00035	8b c1		 mov	 eax, ecx
  00037	c1 f8 10	 sar	 eax, 16			; 00000010H

; 117  : __inline int WmSize(__int16 w, __int16 h) { return MoveWindow(hEdit, 2, 2, w - 4, h - 4, TRUE);}

  0003a	6a 01		 push	 1
  0003c	98		 cwde
  0003d	83 e8 04	 sub	 eax, 4
  00040	50		 push	 eax
  00041	0f bf c1	 movsx	 eax, cx
  00044	83 e8 04	 sub	 eax, 4
  00047	50		 push	 eax
  00048	6a 02		 push	 2
  0004a	6a 02		 push	 2
  0004c	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 150  :     }
; 151  : }

  00058	c3		 ret	 0
?_t_WinProc@@YAHPAUHWND__@@IIJ@Z ENDP			; _t_WinProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?EditProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_msg$ = 12						; size = 4
_wP$ = 16						; size = 4
_lP$ = 20						; size = 4
?EditProc@@YGHPAUHWND__@@IIJ@Z PROC			; EditProc, COMDAT

; 154  :     int __stdcall EditProc(HWND hwnd, UINT msg, WPARAM wP, LPARAM lP) { return msg&WM_KEYDOWN & !WmKeydown(wP) | CallWindowProc(pOrgEdit, hwnd, msg, wP, lP); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _wP$[ebp]
  00006	e8 00 00 00 00	 call	 ?WmKeydown@@YAHH@Z	; WmKeydown
  0000b	ff 75 14	 push	 DWORD PTR _lP$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR _wP$[ebp]
  00011	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _hwnd$[ebp]
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR ?pOrgEdit@@3P6GJPAUHWND__@@IIJ@ZA ; pOrgEdit
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcW@20
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?EditProc@@YGHPAUHWND__@@IIJ@Z ENDP			; EditProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?aWinProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wp$ = 16						; size = 4
_lp$ = 20						; size = 4
?aWinProc@@YGHPAUHWND__@@IIJ@Z PROC			; aWinProc, COMDAT

; 161  :     __inline __int32 CALLBACK aWinProc(HWND hDlg, UINT msg, WPARAM wp, LPARAM lp) { return _t_WinProc(hDlg, msg, wp, lp); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  :     switch (uM) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00006	83 e8 05	 sub	 eax, 5
  00009	74 33		 je	 SHORT $LN7@aWinProc
  0000b	2d fb 00 00 00	 sub	 eax, 251		; 000000fbH
  00010	74 22		 je	 SHORT $LN8@aWinProc
  00012	83 e8 10	 sub	 eax, 16			; 00000010H
  00015	74 13		 je	 SHORT $LN6@aWinProc
  00017	83 e8 01	 sub	 eax, 1
  0001a	74 04		 je	 SHORT $LN9@aWinProc

; 149  :     default: return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 44		 jmp	 SHORT $LN3@aWinProc
$LN9@aWinProc:

; 147  :     #endif
; 148  :     case WM_COMMAND: return WmCommand(wP, lP); // pass-through; FALSE

  00020	8b 4d 10	 mov	 ecx, DWORD PTR _wp$[ebp]
  00023	e8 00 00 00 00	 call	 ?WmCommand@@YAHIJ@Z	; WmCommand
  00028	eb 3a		 jmp	 SHORT $LN3@aWinProc
$LN6@aWinProc:

; 143  :     case WM_INITDIALOG: return WmInit(hDlgl);

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _hDlg$[ebp]
  0002d	e8 00 00 00 00	 call	 ?WmInit@@YAHPAUHWND__@@@Z ; WmInit
  00032	eb 30		 jmp	 SHORT $LN3@aWinProc
$LN8@aWinProc:

; 145  :     #ifdef SHORTCUT_KEYS
; 146  :         case WM_KEYDOWN: return WmKeydown(wP);

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _wp$[ebp]
  00037	e8 00 00 00 00	 call	 ?WmKeydown@@YAHH@Z	; WmKeydown
  0003c	eb 26		 jmp	 SHORT $LN3@aWinProc
$LN7@aWinProc:

; 144  :     case WM_SIZE: return WmSize(lP, lP>>16);

  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _lp$[ebp]
  00041	8b c1		 mov	 eax, ecx
  00043	c1 f8 10	 sar	 eax, 16			; 00000010H

; 117  : __inline int WmSize(__int16 w, __int16 h) { return MoveWindow(hEdit, 2, 2, w - 4, h - 4, TRUE);}

  00046	6a 01		 push	 1
  00048	98		 cwde
  00049	83 e8 04	 sub	 eax, 4
  0004c	50		 push	 eax
  0004d	0f bf c1	 movsx	 eax, cx
  00050	83 e8 04	 sub	 eax, 4
  00053	50		 push	 eax
  00054	6a 02		 push	 2
  00056	6a 02		 push	 2
  00058	ff 35 00 00 00
	00		 push	 DWORD PTR ?hEdit@@3PAUHWND__@@A ; hEdit
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
$LN3@aWinProc:

; 161  :     __inline __int32 CALLBACK aWinProc(HWND hDlg, UINT msg, WPARAM wp, LPARAM lp) { return _t_WinProc(hDlg, msg, wp, lp); }

  00064	5d		 pop	 ebp
  00065	c2 10 00	 ret	 16			; 00000010H
?aWinProc@@YGHPAUHWND__@@IIJ@Z ENDP			; aWinProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\s\gormb\minpad\minpad.cpp
;	COMDAT ?aWinMain@@YGHXZ
_TEXT	SEGMENT
?aWinMain@@YGHXZ PROC					; aWinMain, COMDAT

; 168  :         int APIENTRY aWinMain() { return DialogBoxParamA(0, (char*)103, 0, aWinProc, 0); }

  00000	33 c0		 xor	 eax, eax
  00002	50		 push	 eax
  00003	68 00 00 00 00	 push	 OFFSET ?aWinProc@@YGHPAUHWND__@@IIJ@Z ; aWinProc
  00008	50		 push	 eax
  00009	6a 67		 push	 103			; 00000067H
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamA@20
  00012	c3		 ret	 0
?aWinMain@@YGHXZ ENDP					; aWinMain
_TEXT	ENDS
END
